/*
GENO 0033.001.01 - 20240904 Creates Genome Daily Closing Base View
Genome Dashboard - Creates the subscription closing base 2 year history 
Includes 3rd Party
Excludes Prin-only
Paying Subscription only
Version Date: 20240904
*/

/* Report Run Date */

declare dashboard_run_date date default date(current_date('Australia/Sydney') - 1);

/* Calendar Dates */

declare calendar_start_date date default date(current_date('Australia/Sydney') - ((7*105)));
declare calendar_end_date date default date(current_date('Australia/Sydney') - 1);

/* Partition Dates */

declare rpd_pt_date array<date> default (select array_agg(distinct pt_date) from(select max(dw_tgt_partition_date) as pt_date from  `ncau-data-newsquery-prd.bdm_consumer.rate_plan_dim` where dw_tgt_partition_date between current_date('Australia/Sydney') - 14 and current_date('Australia/Sydney'))); --<='2199-12-31'));

/* Creates Subscription Closing Base */

create or replace table `nau-data-nprod-dataservices.prstn_genome.t_subscription_base_history`

partition by report_date

cluster by subscriber_id_src, subscription_id_src

as

with relative_calendar_dim

as

(
select

cal.calendar_date as report_date

from `nau-data-nprod-dataservices.reference_data_genome.t_calendar_dim` cal

where 1=1
and cast(cal.calendar_date as date) between calendar_start_date and calendar_end_date

)
,

offer_category

as

(
select 

ocd.*

from `nau-data-nprod-dataservices.reference_data_genome.t_offer_category_dim` ocd

where 1=1
and dashboard_run_date between cast(ocd.start_date as date) and cast(ocd.end_date as date) 

)
, 

mosaic_reference_data

as

(
select 

mos.mosaic_group_name
, mos.mosaic_class

from `nau-data-nprod-dataservices.reference_data_genome.t_mosaic_dim` mos

where 1=1
and dashboard_run_date between cast(mos.start_date as date) and cast(mos.end_date as date) 

group by 1,2

)
, 

subscription_base_history_txfm1

as

(
select 

/* Subscriber & Subscription Detail */

't_subscription_base_history' as entity_name
, lv1.member_type
, lv1.subscriber_id_src
, lv1.subscription_id_src
, lv1.subscriber_tenure_days
, lv1.subscription_count
, lv1.dw_subscriber_start_datetime
, lv1.dw_subscriber_end_datetime
, lv1.subscriber_tenure_partition_start_date
, lv1.subscriber_tenure_partition_end_date
, lv1.member_type_subscription_start_date
, lv1.member_type_subscription_end_date
, lv1.subscription_start_date
, lv1.subscription_end_date
, lv1.member_type_subscription_report_end_date
, lv1.subscription_report_end_date
, lv1.subscription_effective_report_end_date
, lv1.subscriber_report_end_date
, lv1.customer_type
, lv1.classification_level_1
, lv1.classification_level_2
, lv1.offer_category_group
, lv1.sold_in_channel
, lv1.sold_in_source_referrer
, lv1.masthead

/* Demographic Transformation */

, lv1.subscriber_mosaic_group
, lv1.subscriber_individual_gender  
, lv1.subscriber_individual_age   

/* Calendar Flags & Dates */

, rcd.report_date

/* Base & Movement Flags */

/* Subscription Rules */

, case when rcd.report_date between cast(lv1.dw_effective_start_datetime as date) and cast(lv1.dw_effective_end_datetime as date) and
        rcd.report_date between cast(lv1.dw_subscriber_start_datetime as date) and cast(lv1.dw_subscriber_end_datetime as date) 
        then 1 else 0 end as subscription_closing_base_flag
, case when cast(lv1.subscription_start_date as date) = cast(lv1.dw_subscriber_start_datetime as date) 
        and cast(lv1.subscription_start_date as date) = cast(lv1.dw_effective_start_datetime as date) 
        and cast(lv1.subscription_start_date as date) = rcd.report_date 
        then 1 else 0 end as subscription_adds_flag
, case when cast(lv1.member_type_subscription_report_end_date as date) = cast(lv1.subscriber_report_end_date as date) 
        and cast(lv1.member_type_subscription_report_end_date as date) = cast(lv1.subscription_effective_report_end_date as date) 
        and cast(lv1.member_type_subscription_report_end_date as date) = rcd.report_date 
        then 1 else 0 end as subscription_cancels_flag

/* Subscriber Rules */

, case when rcd.report_date between cast(lv1.dw_subscriber_start_datetime as date) and cast(lv1.dw_subscriber_end_datetime as date) 
        then 1 else 0 end as subscriber_closing_base_flag
, case when cast(lv1.subscriber_tenure_partition_start_date as date) = rcd.report_date 
        then 1 else 0 end as subscriber_adds_flag
, case when cast(lv1.subscriber_tenure_partition_report_end_date as date) = rcd.report_date 
        then 1 else 0 end as subscriber_cancels_flag

from
(
select 

sbf.*
, min(cast(sbf.dw_subscriber_start_datetime as date)) over(partition by sbf.member_type, sbf.subscriber_id_src, sbf.subscriber_tenure_order) as subscriber_tenure_partition_start_date
, max(cast(sbf.dw_subscriber_end_datetime as date)) over(partition by sbf.member_type, sbf.subscriber_id_src, sbf.subscriber_tenure_order) as subscriber_tenure_partition_end_date
, min(cast(sbf.dw_effective_start_datetime as date)) over(partition by sbf.member_type, sbf.subscription_id_src) as member_type_subscription_start_date
, max(cast(sbf.dw_effective_end_datetime as date)) over(partition by sbf.member_type, sbf.subscription_id_src) as member_type_subscription_end_date
, min(cast(sbf.dw_effective_start_datetime as date)) over(partition by sbf.subscription_id_src) as subscription_start_date
, max(cast(sbf.dw_effective_end_datetime as date)) over(partition by sbf.subscription_id_src) as subscription_end_date
, date_diff(cast(sbf.dw_subscriber_end_datetime as date),min(cast(sbf.dw_subscriber_start_datetime as date)) over(partition by sbf.member_type, sbf.subscriber_id_src, sbf.subscriber_tenure_order), day) as subscriber_tenure_days
, date_add(cast(max(cast(sbf.dw_effective_end_datetime as date)) over(partition by sbf.member_type, sbf.subscription_id_src) as date), interval 1 day) as member_type_subscription_report_end_date
, date_add(max(cast(sbf.dw_effective_end_datetime as date)) over(partition by sbf.subscription_id_src), interval 1 day) as subscription_report_end_date
, date_add(cast(sbf.dw_effective_end_datetime as date), interval 1 day) as subscription_effective_report_end_date
, date_add(cast(sbf.dw_subscriber_end_datetime as date), interval 1 day) as subscriber_report_end_date
, date_add(max(cast(sbf.dw_subscriber_end_datetime as date)) over(partition by sbf.member_type, sbf.subscriber_id_src, sbf.subscriber_tenure_order), interval 1 day) as subscriber_tenure_partition_report_end_date
, rpd.classification_level_1
, rpd.classification_level_2
, rpd.masthead

/* Demographics Details */

, tsd.mosaic_title
, case when tsd.individual_gender = 'Not Available' then 'Not Available' else coalesce(upper(tsd.individual_gender), 'Not Available') end as subscriber_individual_gender
, coalesce(tsd.individual_age, 'Not Available') as subscriber_individual_age
, coalesce(mos.mosaic_class, 'Not Available') as subscriber_mosaic_group

/* Offer & Sold In Details */

, coalesce(oc.offer_category_group, 'Not Available') as offer_category_group
, psb.sold_in_channel
, psb.sold_in_source_referrer

from `nau-data-nprod-dataservices.bdm_genome.t_subscriber_base_fct_staging` sbf

inner join `ncau-data-newsquery-prd.bdm_consumer.rate_plan_dim` rpd
on sbf.dw_rate_plan_id = rpd.dw_rate_plan_id 
and rpd.dw_tgt_partition_date in unnest(rpd_pt_date)
and rpd.dw_source_system_code = 'THINK'

left outer join `nau-data-nprod-dataservices.prstn_genome.t_subscriber_demographics` tsd
on cast(sbf.subscriber_id_src as string) = cast(tsd.subscriber_id_src as string)
and tsd.subscriber_record_order = 1

left outer join `nau-data-nprod-dataservices.prstn_genome.t_prstn_subscription_base` psb
on cast(sbf.subscription_id_src as string) = cast(psb.subscription_id_src as string)
and cast(sbf.dw_effective_start_datetime as date) = cast(psb.dw_effective_start_datetime as date)

left outer join offer_category oc
on psb.offer_category_name = oc.offer_category_name

left outer join mosaic_reference_data mos
on tsd.mosaic_title = mos.mosaic_group_name

where 1=1
and rpd.masthead not in('SN')

) lv1

inner join relative_calendar_dim rcd
on rcd.report_date between cast(lv1.dw_subscriber_start_datetime as date) and cast(lv1.subscriber_report_end_date as date)

where 1=1
and lv1.classification_level_2 not in('Print-only')
and lv1.member_type = 'subscriber'

)
, 

subscription_base_history_txfm2

as

(
select 

tx1.entity_name

/* Calendar Flags & Dates */
, tx1.report_date

, tx1.member_type
, tx1.subscriber_id_src
, tx1.subscription_id_src
, tx1.subscriber_tenure_days
, tx1.dw_subscriber_start_datetime
, tx1.dw_subscriber_end_datetime
, tx1.subscriber_tenure_partition_start_date
, tx1.subscriber_tenure_partition_end_date
, tx1.member_type_subscription_start_date
, tx1.member_type_subscription_end_date
, tx1.subscription_start_date
, tx1.subscription_end_date
, tx1.member_type_subscription_report_end_date
, tx1.subscription_report_end_date
, tx1.subscription_effective_report_end_date
, tx1.subscriber_report_end_date
, tx1.customer_type
, tx1.classification_level_1
, tx1.classification_level_2
, tx1.offer_category_group
, tx1.sold_in_channel
, tx1.sold_in_source_referrer
, tx1.masthead

/* Demographic Transformation */

, tx1.subscriber_mosaic_group
, tx1.subscriber_individual_gender  
, tx1.subscriber_individual_age   

/* Base & Movement Flags */

/* Subscription Rules */

, tx1.subscription_closing_base_flag
, tx1.subscription_adds_flag
, tx1.subscription_cancels_flag

/* Subscriber Rules */

, tx1.subscriber_closing_base_flag
, tx1.subscriber_adds_flag
, tx1.subscriber_cancels_flag

/* Aggregated Subscription Closing Base Count */

, sum(tx1.subscription_count) as subscription_count

from subscription_base_history_txfm1 tx1

where 1=1

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34

)

/* Query */

select 

squ.*

from subscription_base_history_txfm1 squ

where 1=1


